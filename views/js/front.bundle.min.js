document.addEventListener('DOMContentLoaded', function() {
const uploadZone = document.querySelector('.art-puzzle-upload-zone');
const fileInput = document.getElementById('art-puzzle-file');
const browseBtn = document.getElementById('art-puzzle-browse-btn');
const previewContainer = document.querySelector('.art-puzzle-preview');
const previewImg = document.getElementById('art-puzzle-preview-img');
const changeImgBtn = document.getElementById('art-puzzle-change-img');
const steps = document.querySelectorAll('.art-puzzle-steps .step');
const nextStep1Btn = document.getElementById('art-puzzle-next-step');
const nextStep2Btn = document.getElementById('art-puzzle-next-step-2');
const prevStep1Btn = document.getElementById('art-puzzle-prev-step-1');
const prevStep2Btn = document.getElementById('art-puzzle-prev-step-2');
const finishBtn = document.getElementById('art-puzzle-finish');
const cropContainer = document.querySelector('.art-puzzle-crop-container');
const cropImg = document.getElementById('art-puzzle-crop-img');
const rotateLeftBtn = document.getElementById('art-puzzle-rotate-left');
const rotateRightBtn = document.getElementById('art-puzzle-rotate-right');
const qualityInfo = document.querySelector('.art-puzzle-quality-info');
const boxTextInput = document.getElementById('art-puzzle-box-text');
const charsLeftSpan = document.getElementById('art-puzzle-chars-left');
const boxColorsContainer = document.getElementById('art-puzzle-box-colors');
const fontsContainer = document.getElementById('art-puzzle-fonts');
const boxSimulation = document.getElementById('art-puzzle-box-simulation');
const loadingOverlay = document.querySelector('.art-puzzle-loading');
let currentStep = 1;
let currentRotation = 0;
let cropper = null;
let uploadedImage = null;
let selectedFormat = null;
let selectedBoxColor = '#ffffff';
let selectedTextColor = '#000000';
let selectedFont = '';
let cropData = null;
init();
function init() {
if (uploadZone && fileInput && browseBtn) {
initUploadZone();
}
initNavigationButtons();
if (boxTextInput && artPuzzleDefaultBoxText) {
boxTextInput.value = artPuzzleDefaultBoxText;
updateCharsLeft();
}
loadBoxColors();
loadFonts();
checkDirectoryPermissions();
}
function initUploadZone() {
browseBtn.addEventListener('click', function() {
fileInput.click();
});
fileInput.addEventListener('change', function() {
if (this.files && this.files[0]) {
handleFileUpload(this.files[0]);
}
});
uploadZone.addEventListener('dragover', function(e) {
e.preventDefault();
uploadZone.classList.add('dragover');
});
uploadZone.addEventListener('dragleave', function() {
uploadZone.classList.remove('dragover');
});
uploadZone.addEventListener('drop', function(e) {
e.preventDefault();
uploadZone.classList.remove('dragover');
if (e.dataTransfer.files && e.dataTransfer.files[0]) {
handleFileUpload(e.dataTransfer.files[0]);
}
});
if (changeImgBtn) {
changeImgBtn.addEventListener('click', function() {
resetUploadZone();
});
}
}
function initNavigationButtons() {
if (nextStep1Btn) {
nextStep1Btn.addEventListener('click', function() {
if (uploadedImage) {
goToStep(2);
initCropper();
checkImageQuality();
}
});
}
if (prevStep1Btn) {
prevStep1Btn.addEventListener('click', function() {
goToStep(1);
destroyCropper();
});
}
if (nextStep2Btn) {
nextStep2Btn.addEventListener('click', function() {
if (cropper) {
cropData = cropper.getData();
goToStep(3);
generateBoxPreview();
}
});
}
if (prevStep2Btn) {
prevStep2Btn.addEventListener('click', function() {
goToStep(2);
});
}
if (finishBtn) {
finishBtn.addEventListener('click', function() {
savePuzzleCustomization();
});
}
}
function handleFileUpload(file) {
if (artPuzzleAllowedFileTypes.indexOf(file.type) === -1) {
alert('Tipo di file non supportato. Utilizza solo immagini JPG, PNG o GIF.');
return;
}
if (file.size > artPuzzleMaxUploadSize) {
alert('File troppo grande. La dimensione massima è ' + (artPuzzleMaxUploadSize / (1024 * 1024)) + 'MB.');
return;
}
if (loadingOverlay) {
loadingOverlay.style.display = 'flex';
}
const formData = new FormData();
formData.append('image', file);
formData.append('action', 'uploadImage');
formData.append('token', artPuzzleToken);
fetch(artPuzzleAjaxUrl, {
method: 'POST',
body: formData
})
.then(response => response.json())
.then(data => {
if (loadingOverlay) {
loadingOverlay.style.display = 'none';
}
if (data.success) {
displayImagePreview(file);
uploadedImage = {
file: file,
path: data.data.path,
width: data.data.width,
height: data.data.height,
quality: data.data.quality
};
if (nextStep1Btn) {
nextStep1Btn.disabled = false;
}
} else {
alert(data.message || 'Errore durante il caricamento dell\'immagine.');
}
})
.catch(error => {
if (loadingOverlay) {
loadingOverlay.style.display = 'none';
}
console.error('Errore:', error);
alert('Si è verificato un errore durante il caricamento dell\'immagine.');
});
}
function displayImagePreview(file) {
const reader = new FileReader();
reader.onload = function(e) {
if (previewImg) {
previewImg.src = e.target.result;
}
if (cropImg) {
cropImg.src = e.target.result;
}
if (uploadZone && previewContainer) {
uploadZone.style.display = 'none';
previewContainer.style.display = 'block';
}
};
reader.readAsDataURL(file);
}
function resetUploadZone() {
if (fileInput) {
fileInput.value = '';
}
if (uploadZone && previewContainer) {
uploadZone.style.display = 'block';
previewContainer.style.display = 'none';
}
if (nextStep1Btn) {
nextStep1Btn.disabled = true;
}
uploadedImage = null;
}
function goToStep(step) {
currentStep = step;
steps.forEach((stepElement, index) => {
if (index + 1 === step) {
stepElement.style.display = 'block';
stepElement.classList.add('active');
} else {
stepElement.style.display = 'none';
stepElement.classList.remove('active');
}
});
}
function initCropper() {
if (!cropImg || !artPuzzleEnableCropTool) {
return;
}
destroyCropper();
cropper = new Cropper(cropImg, {
aspectRatio: 1,
viewMode: 1,
guides: true,
center: true,
movable: true,
zoomable: true,
scalable: false,
rotatable: false,
autoCropArea: 0.8,
responsive: true,
ready: function() {
loadPuzzleFormats();
}
});
if (rotateLeftBtn && artPuzzleEnableOrientation) {
rotateLeftBtn.addEventListener('click', function() {
currentRotation = (currentRotation - 90) % 360;
cropper.rotateTo(currentRotation);
});
}
if (rotateRightBtn && artPuzzleEnableOrientation) {
rotateRightBtn.addEventListener('click', function() {
currentRotation = (currentRotation + 90) % 360;
cropper.rotateTo(currentRotation);
});
}
}
function destroyCropper() {
if (cropper) {
cropper.destroy();
cropper = null;
}
}
function loadPuzzleFormats() {
let orientation = 'square';
if (uploadedImage) {
const ratio = uploadedImage.width / uploadedImage.height;
if (ratio > 1.2) {
orientation = 'landscape';
} else if (ratio < 0.8) {
orientation = 'portrait';
}
}
if (loadingOverlay) {
loadingOverlay.style.display = 'flex';
}
const params = new URLSearchParams();
params.append('action', 'getPuzzleFormats');
params.append('orientation', orientation);
params.append('token', artPuzzleToken);
fetch(artPuzzleAjaxUrl + '?' + params.toString())
.then(response => response.json())
.then(data => {
if (loadingOverlay) {
loadingOverlay.style.display = 'none';
}
if (data.success && data.data) {
const formatIds = Object.keys(data.data);
if (formatIds.length > 0) {
selectedFormat = formatIds[0];
updateCropperAspectRatio(data.data[selectedFormat].ratio);
}
} else {
alert(data.message || 'Errore durante il caricamento dei formati.');
}
})
.catch(error => {
if (loadingOverlay) {
loadingOverlay.style.display = 'none';
}
console.error('Errore:', error);
alert('Si è verificato un errore durante il caricamento dei formati puzzle.');
});
}
function updateCropperAspectRatio(ratio) {
if (cropper && ratio) {
cropper.setAspectRatio(ratio);
cropper.crop();
}
}
function checkImageQuality() {
if (!uploadedImage) {
return;
}
if (qualityInfo) {
let message = '';
let alertClass = '';
switch (uploadedImage.quality) {
case 'alta':
message = 'L\'immagine è di ottima qualità!';
alertClass = 'alert-success';
break;
case 'media':
message = 'L\'immagine è di media risoluzione. La qualità dovrebbe essere accettabile.';
alertClass = 'alert-warning';
break;
case 'bassa':
message = 'L\'immagine è di bassa risoluzione. Potrebbe apparire pixelata sul puzzle.';
alertClass = 'alert-danger';
break;
}
if (message) {
qualityInfo.innerHTML = message;
qualityInfo.className = 'art-puzzle-quality-info mt-3 alert';
qualityInfo.classList.add(alertClass);
qualityInfo.style.display = 'block';
}
}
}
function loadBoxColors() {
if (!boxColorsContainer) {
return;
}
const params = new URLSearchParams();
params.append('action', 'getBoxColors');
params.append('token', artPuzzleToken);
fetch(artPuzzleAjaxUrl + '?' + params.toString())
.then(response => response.json())
.then(data => {
if (data.success && data.data) {
let colorButtons = '';
data.data.forEach(color => {
colorButtons += `
<div class="color-option m-1">
<button type="button" class="btn color-btn"
style="background-color: ${color.hex};"
data-color="${color.hex}"
title="${color.name}">
</button>
</div>
`;
});
boxColorsContainer.innerHTML = colorButtons;
document.querySelectorAll('.color-btn').forEach(btn => {
btn.addEventListener('click', function() {
document.querySelectorAll('.color-btn').forEach(b => {
b.classList.remove('selected');
});
this.classList.add('selected');
selectedBoxColor = this.getAttribute('data-color');
generateBoxPreview();
});
});
const firstColorBtn = document.querySelector('.color-btn');
if (firstColorBtn) {
firstColorBtn.classList.add('selected');
selectedBoxColor = firstColorBtn.getAttribute('data-color');
}
}
})
.catch(error => {
console.error('Errore:', error);
});
}
function loadFonts() {
if (!fontsContainer) {
return;
}
const params = new URLSearchParams();
params.append('action', 'getFonts');
params.append('token', artPuzzleToken);
fetch(artPuzzleAjaxUrl + '?' + params.toString())
.then(response => response.json())
.then(data => {
if (data.success && data.data) {
let fontButtons = '';
data.data.forEach((font, index) => {
const fontName = font.replace('.ttf', '').replace('.otf', '');
fontButtons += `
<div class="font-option m-1">
<button type="button" class="btn btn-outline-secondary font-btn"
style="font-family: 'puzzle-font-${index}';"
data-font="${font}">
${fontName}
</button>
</div>
`;
});
fontsContainer.innerHTML = fontButtons;
document.querySelectorAll('.font-btn').forEach(btn => {
btn.addEventListener('click', function() {
document.querySelectorAll('.font-btn').forEach(b => {
b.classList.remove('selected');
});
this.classList.add('selected');
selectedFont = this.getAttribute('data-font');
generateBoxPreview();
});
});
const firstFontBtn = document.querySelector('.font-btn');
if (firstFontBtn) {
firstFontBtn.classList.add('selected');
selectedFont = firstFontBtn.getAttribute('data-font');
}
}
})
.catch(error => {
console.error('Errore:', error);
});
}
function updateCharsLeft() {
if (!boxTextInput || !charsLeftSpan) {
return;
}
const maxLength = parseInt(boxTextInput.getAttribute('maxlength') || artPuzzleMaxBoxTextLength);
const remaining = maxLength - boxTextInput.value.length;
charsLeftSpan.textContent = remaining;
generateBoxPreview();
}
function generateBoxPreview() {
if (!boxSimulation || !boxTextInput) {
return;
}
const boxText = boxTextInput.value || artPuzzleDefaultBoxText;
const params = new URLSearchParams();
params.append('action', 'generateBoxPreview');
params.append('text', boxText);
params.append('color', selectedBoxColor);
params.append('font', selectedFont);
params.append('template', 'classic');
params.append('token', artPuzzleToken);
if (loadingOverlay) {
loadingOverlay.style.display = 'flex';
}
fetch(artPuzzleAjaxUrl + '?' + params.toString())
.then(response => response.json())
.then(data => {
if (loadingOverlay) {
loadingOverlay.style.display = 'none';
}
if (data.success && data.data.preview) {
boxSimulation.innerHTML = `<img src="${data.data.preview}" alt="Anteprima scatola" class="img-fluid">`;
} else {
boxSimulation.innerHTML = '<div class="alert alert-warning">Impossibile generare l\'anteprima della scatola.</div>';
}
})
.catch(error => {
if (loadingOverlay) {
loadingOverlay.style.display = 'none';
}
console.error('Errore:', error);
boxSimulation.innerHTML = '<div class="alert alert-danger">Errore durante la generazione dell\'anteprima.</div>';
});
}
function savePuzzleCustomization() {
if (!uploadedImage || !selectedFormat || !selectedBoxColor || !selectedFont) {
alert('Devi completare tutti i passaggi di personalizzazione.');
return;
}
const boxText = boxTextInput.value || artPuzzleDefaultBoxText;
const customizationData = {
product_id: artPuzzleProductId,
customization: {
format_id: selectedFormat,
image: uploadedImage.file ? '' : null,
boxText: boxText,
boxColor: selectedBoxColor,
textColor: '#000000',
font: selectedFont,
cropData: cropData
}
};
if (loadingOverlay) {
loadingOverlay.style.display = 'flex';
}
const formData = new FormData();
formData.append('action', 'add_to_cart');
formData.append('id_product', artPuzzleProductId);
formData.append('token', artPuzzleToken);
formData.append('confirm-customization', 'true');
fetch(artPuzzleAjaxUrl, {
method: 'POST',
body: formData
})
.then(response => response.json())
.then(data => {
if (loadingOverlay) {
loadingOverlay.style.display = 'none';
}
if (data.success) {
window.location.href = data.data.cartUrl;
} else {
alert(data.message || 'Si è verificato un errore durante l\'aggiunta al carrello.');
}
})
.catch(error => {
if (loadingOverlay) {
loadingOverlay.style.display = 'none';
}
console.error('Errore:', error);
alert('Si è verificato un errore durante il salvataggio della personalizzazione.');
});
}
function checkDirectoryPermissions() {
const params = new URLSearchParams();
params.append('action', 'checkDirectoryPermissions');
params.append('token', artPuzzleToken);
fetch(artPuzzleAjaxUrl + '?' + params.toString())
.then(response => response.json())
.then(data => {
if (!data.success) {
console.error('Avviso permessi directory:', data.message);
}
})
.catch(error => {
console.error('Errore durante la verifica dei permessi:', error);
});
}
if (boxTextInput) {
boxTextInput.addEventListener('input', updateCharsLeft);
}
});
class ArtPuzzlePreviewGenerator {
constructor(options = {}) {
this.settings = {
puzzlePreviewContainer: null,
boxPreviewContainer: null,
summaryContainer: null,
ajaxUrl: '',
token: '',
loadingCallback: null,
errorCallback: null
};
Object.assign(this.settings, options);
this.state = {
puzzlePreview: null,
boxPreview: null,
format: null,
boxData: null
};
}
generatePuzzlePreview(options = {}) {
const defaultOptions = {
format: '',
imageData: null,
cropData: null,
rotate: 0
};
const previewOptions = {...defaultOptions, ...options};
if (!previewOptions.format) {
this.handleError('Formato puzzle non specificato');
return;
}
this.startLoading();
const params = new URLSearchParams();
params.append('action', 'generatePuzzlePreview');
params.append('format', previewOptions.format);
params.append('token', this.settings.token);
if (previewOptions.rotate) {
params.append('rotate', previewOptions.rotate);
}
if (previewOptions.cropData) {
params.append('crop', JSON.stringify(previewOptions.cropData));
}
let requestUrl = this.settings.ajaxUrl;
let requestMethod = 'GET';
let requestBody = null;
if (previewOptions.imageData) {
requestMethod = 'POST';
requestBody = new FormData();
requestBody.append('action', 'generatePuzzlePreview');
requestBody.append('format', previewOptions.format);
requestBody.append('token', this.settings.token);
requestBody.append('image', previewOptions.imageData);
if (previewOptions.rotate) {
requestBody.append('rotate', previewOptions.rotate);
}
if (previewOptions.cropData) {
requestBody.append('crop', JSON.stringify(previewOptions.cropData));
}
} else {
requestUrl += '?' + params.toString();
}
fetch(requestUrl, {
method: requestMethod,
body: requestBody
})
.then(response => response.json())
.then(data => {
this.endLoading();
if (data.success) {
this.state.puzzlePreview = data.data.preview;
this.state.format = data.data.format;
if (this.settings.puzzlePreviewContainer) {
this.updatePuzzlePreviewUI();
}
return data.data;
} else {
this.handleError(data.message || 'Errore durante la generazione dell\'anteprima del puzzle');
return null;
}
})
.catch(error => {
this.endLoading();
this.handleError('Errore di connessione: ' + error.message);
return null;
});
}
generateBoxPreview(options = {}) {
const defaultOptions = {
template: 'classic',
color: '#ffffff',
text: '',
font: 'default'
};
const boxOptions = {...defaultOptions, ...options};
this.startLoading();
const params = new URLSearchParams();
params.append('action', 'generateBoxPreview');
params.append('token', this.settings.token);
params.append('template', boxOptions.template);
params.append('color', boxOptions.color);
params.append('text', boxOptions.text);
params.append('font', boxOptions.font);
fetch(this.settings.ajaxUrl + '?' + params.toString())
.then(response => response.json())
.then(data => {
this.endLoading();
if (data.success) {
this.state.boxPreview = data.data.preview;
this.state.boxData = boxOptions;
if (this.settings.boxPreviewContainer) {
this.updateBoxPreviewUI();
}
return data.data;
} else {
this.handleError(data.message || 'Errore durante la generazione dell\'anteprima della scatola');
return null;
}
})
.catch(error => {
this.endLoading();
this.handleError('Errore di connessione: ' + error.message);
return null;
});
}
generateSummaryPreview() {
if (!this.state.puzzlePreview && !this.state.boxPreview) {
this.handleError('Devi prima configurare il puzzle e la scatola');
return;
}
this.startLoading();
const params = new URLSearchParams();
params.append('action', 'generateSummaryPreview');
params.append('token', this.settings.token);
fetch(this.settings.ajaxUrl + '?' + params.toString())
.then(response => response.json())
.then(data => {
this.endLoading();
if (data.success) {
this.state.puzzlePreview = data.data.puzzlePreview;
this.state.boxPreview = data.data.boxPreview;
this.state.format = data.data.format;
this.state.boxData = data.data.boxData;
if (this.settings.summaryContainer) {
this.updateSummaryUI();
}
return data.data;
} else {
this.handleError(data.message || 'Errore durante la generazione del riepilogo');
return null;
}
})
.catch(error => {
this.endLoading();
this.handleError('Errore di connessione: ' + error.message);
return null;
});
}
updatePuzzlePreviewUI() {
if (!this.settings.puzzlePreviewContainer || !this.state.puzzlePreview) {
return;
}
if (typeof this.settings.puzzlePreviewContainer === 'string') {
const container = document.querySelector(this.settings.puzzlePreviewContainer);
if (container) {
container.innerHTML = `<img src="${this.state.puzzlePreview}" alt="Anteprima puzzle" class="img-fluid">`;
}
} else if (this.settings.puzzlePreviewContainer instanceof HTMLElement) {
this.settings.puzzlePreviewContainer.innerHTML = `<img src="${this.state.puzzlePreview}" alt="Anteprima puzzle" class="img-fluid">`;
}
if (this.state.format) {
const formatInfo = document.createElement('div');
formatInfo.className = 'puzzle-format-info mt-3';
formatInfo.innerHTML = `
<h5>Dettagli formato</h5>
<ul class="list-unstyled">
<li><strong>Formato:</strong> ${this.state.format.name}</li>
<li><strong>Dimensioni:</strong> ${this.state.format.dimensions}</li>
<li><strong>Numero pezzi:</strong> ${this.state.format.pieces}</li>
</ul>
`;
if (typeof this.settings.puzzlePreviewContainer === 'string') {
const container = document.querySelector(this.settings.puzzlePreviewContainer);
if (container) {
const oldInfo = container.querySelector('.puzzle-format-info');
if (oldInfo) {
oldInfo.remove();
}
container.appendChild(formatInfo);
}
} else if (this.settings.puzzlePreviewContainer instanceof HTMLElement) {
const oldInfo = this.settings.puzzlePreviewContainer.querySelector('.puzzle-format-info');
if (oldInfo) {
oldInfo.remove();
}
this.settings.puzzlePreviewContainer.appendChild(formatInfo);
}
}
}
updateBoxPreviewUI() {
if (!this.settings.boxPreviewContainer || !this.state.boxPreview) {
return;
}
if (typeof this.settings.boxPreviewContainer === 'string') {
const container = document.querySelector(this.settings.boxPreviewContainer);
if (container) {
container.innerHTML = `<img src="${this.state.boxPreview}" alt="Anteprima scatola" class="img-fluid">`;
}
} else if (this.settings.boxPreviewContainer instanceof HTMLElement) {
this.settings.boxPreviewContainer.innerHTML = `<img src="${this.state.boxPreview}" alt="Anteprima scatola" class="img-fluid">`;
}
if (this.state.boxData) {
const boxInfo = document.createElement('div');
boxInfo.className = 'box-info mt-3';
boxInfo.innerHTML = `
<h5>Dettagli scatola</h5>
<ul class="list-unstyled">
<li><strong>Testo:</strong> "${this.state.boxData.text ? this.state.boxData.text : 'Nessun testo'}"</li>
<li><strong>Colore:</strong> <span style="display:inline-block; width:20px; height:20px; background-color:${this.state.boxData.color}; vertical-align:middle;"></span> ${this.state.boxData.color}</li>
<li><strong>Font:</strong> ${this.state.boxData.font.replace('.ttf', '').replace('.otf', '')}</li>
</ul>
`;
if (typeof this.settings.boxPreviewContainer === 'string') {
const container = document.querySelector(this.settings.boxPreviewContainer);
if (container) {
const oldInfo = container.querySelector('.box-info');
if (oldInfo) {
oldInfo.remove();
}
container.appendChild(boxInfo);
}
} else if (this.settings.boxPreviewContainer instanceof HTMLElement) {
const oldInfo = this.settings.boxPreviewContainer.querySelector('.box-info');
if (oldInfo) {
oldInfo.remove();
}
this.settings.boxPreviewContainer.appendChild(boxInfo);
}
}
}
updateSummaryUI() {
if (!this.settings.summaryContainer) {
return;
}
let container;
if (typeof this.settings.summaryContainer === 'string') {
container = document.querySelector(this.settings.summaryContainer);
} else if (this.settings.summaryContainer instanceof HTMLElement) {
container = this.settings.summaryContainer;
}
if (!container) {
return;
}
let summaryHTML = '<div class="row">';
summaryHTML += '<div class="col-md-6">';
summaryHTML += '<div class="card">';
summaryHTML += '<div class="card-header"><h4>Il tuo puzzle</h4></div>';
summaryHTML += '<div class="card-body text-center">';
if (this.state.puzzlePreview) {
summaryHTML += `<img src="${this.state.puzzlePreview}" alt="Anteprima puzzle" class="img-fluid">`;
} else {
summaryHTML += '<div class="alert alert-warning">Anteprima non disponibile</div>';
}
if (this.state.format) {
summaryHTML += `
<div class="puzzle-info mt-3">
<h5>Dettagli formato</h5>
<ul class="list-unstyled">
<li><strong>Formato:</strong> ${this.state.format.name}</li>
<li><strong>Dimensioni:</strong> ${this.state.format.dimensions}</li>
<li><strong>Numero pezzi:</strong> ${this.state.format.pieces}</li>
<li><strong>Orientamento:</strong> ${this.state.format.orientation}</li>
</ul>
</div>
`;
}
summaryHTML += '</div></div></div>';
summaryHTML += '<div class="col-md-6">';
summaryHTML += '<div class="card">';
summaryHTML += '<div class="card-header"><h4>La tua scatola</h4></div>';
summaryHTML += '<div class="card-body text-center">';
if (this.state.boxPreview) {
summaryHTML += `<img src="${this.state.boxPreview}" alt="Anteprima scatola" class="img-fluid">`;
} else {
summaryHTML += '<div class="alert alert-warning">Anteprima non disponibile</div>';
}
if (this.state.boxData) {
summaryHTML += `
<div class="box-info mt-3">
<h5>Dettagli scatola</h5>
<ul class="list-unstyled">
<li><strong>Testo:</strong> "${this.state.boxData.text ? this.state.boxData.text : 'Nessun testo'}"</li>
<li><strong>Colore:</strong> <span style="display:inline-block; width:20px; height:20px; background-color:${this.state.boxData.color}; vertical-align:middle;"></span> ${this.state.boxData.color}</li>
<li><strong>Font:</strong> ${this.state.boxData.font.replace('.ttf', '').replace('.otf', '')}</li>
</ul>
</div>
`;
}
summaryHTML += '</div></div></div>';
summaryHTML += '</div>';
container.innerHTML = summaryHTML;
}
startLoading() {
if (typeof this.settings.loadingCallback === 'function') {
this.settings.loadingCallback(true);
}
}
endLoading() {
if (typeof this.settings.loadingCallback === 'function') {
this.settings.loadingCallback(false);
}
}
handleError(message) {
if (typeof this.settings.errorCallback === 'function') {
this.settings.errorCallback(message);
} else {
console.error('ArtPuzzlePreviewGenerator: ' + message);
}
}
getState() {
return {
puzzlePreview: this.state.puzzlePreview,
boxPreview: this.state.boxPreview,
format: this.state.format,
boxData: this.state.boxData
};
}
loadStateFromSession() {
this.startLoading();
const params = new URLSearchParams();
params.append('action', 'getSessionState');
params.append('token', this.settings.token);
fetch(this.settings.ajaxUrl + '?' + params.toString())
.then(response => response.json())
.then(data => {
this.endLoading();
if (data.success) {
this.state = data.data.state || this.state;
if (this.settings.puzzlePreviewContainer && this.state.puzzlePreview) {
this.updatePuzzlePreviewUI();
}
if (this.settings.boxPreviewContainer && this.state.boxPreview) {
this.updateBoxPreviewUI();
}
if (this.settings.summaryContainer && this.state.puzzlePreview && this.state.boxPreview) {
this.updateSummaryUI();
}
return data.data;
}
})
.catch(error => {
this.endLoading();
console.error('Errore durante il caricamento dello stato:', error);
});
}
}
window.ArtPuzzlePreviewGenerator = ArtPuzzlePreviewGenerator;
class ArtPuzzleCropper {
constructor(options = {}) {
this.settings = {
imageElement: null,
previewElement: null,
container: null,
aspectRatio: null,
minWidth: 800,
minHeight: 800,
qualityWarningCallback: null,
cropChangeCallback: null,
onReadyCallback: null,
zoomable: true,
scalable: false,
rotatable: true,
formats: {}
};
Object.assign(this.settings, options);
this.cropper = null;
this.state = {
rotation: 0,
format: null,
cropData: null,
originalImageData: {
width: 0,
height: 0
}
};
this.init();
}
init() {
if (!this.settings.imageElement) {
console.error('ArtPuzzleCropper: Elemento immagine non specificato');
return;
}
if (this.settings.imageElement.complete) {
this.initCropper();
} else {
this.settings.imageElement.addEventListener('load', () => {
this.initCropper();
});
}
}
initCropper() {
this.state.originalImageData = {
width: this.settings.imageElement.naturalWidth,
height: this.settings.imageElement.naturalHeight
};
const cropperOptions = {
viewMode: 1,
dragMode: 'move',
aspectRatio: this.settings.aspectRatio,
autoCropArea: 0.8,
restore: false,
guides: true,
center: true,
highlight: true,
cropBoxMovable: true,
cropBoxResizable: true,
toggleDragModeOnDblclick: false,
zoomable: this.settings.zoomable,
scalable: this.settings.scalable,
rotatable: this.settings.rotatable,
ready: () => {
this.checkImageQuality();
if (typeof this.settings.onReadyCallback === 'function') {
this.settings.onReadyCallback(this);
}
},
crop: (event) => {
this.state.cropData = event.detail;
if (this.settings.previewElement) {
this.updatePreview();
}
if (typeof this.settings.cropChangeCallback === 'function') {
this.settings.cropChangeCallback(event.detail);
}
}
};
this.cropper = new Cropper(this.settings.imageElement, cropperOptions);
}
updatePreview() {
if (!this.settings.previewElement || !this.cropper) {
return;
}
const canvas = this.cropper.getCroppedCanvas({
minWidth: this.settings.minWidth / 2,
minHeight: this.settings.minHeight / 2,
maxWidth: 400,
maxHeight: 400
});
if (canvas) {
this.settings.previewElement.src = canvas.toDataURL();
}
}
checkImageQuality() {
if (!this.cropper || !this.state.originalImageData) {
return;
}
const canvasData = this.cropper.getCanvasData();
const containerData = this.cropper.getContainerData();
const scaleX = this.state.originalImageData.width / canvasData.naturalWidth;
const scaleY = this.state.originalImageData.height / canvasData.naturalHeight;
let quality = 'alta';
let message = 'L\'immagine è di ottima qualità per la stampa del puzzle.';
if (this.state.originalImageData.width < this.settings.minWidth ||
this.state.originalImageData.height < this.settings.minHeight) {
quality = 'bassa';
message = 'L\'immagine è di bassa risoluzione. Il puzzle potrebbe apparire pixelato.';
} else if (this.state.originalImageData.width < this.settings.minWidth * 1.5 ||
this.state.originalImageData.height < this.settings.minHeight * 1.5) {
quality = 'media';
message = 'L\'immagine è di media risoluzione. La qualità dovrebbe essere accettabile.';
}
if (typeof this.settings.qualityWarningCallback === 'function') {
this.settings.qualityWarningCallback({
quality: quality,
message: message,
originalWidth: this.state.originalImageData.width,
originalHeight: this.state.originalImageData.height,
minWidth: this.settings.minWidth,
minHeight: this.settings.minHeight
});
}
return {
quality: quality,
message: message
};
}
getCroppedImageDataURL(options = {}) {
if (!this.cropper) {
return null;
}
const defaultOptions = {
minWidth: this.settings.minWidth,
minHeight: this.settings.minHeight,
maxWidth: 4000,
maxHeight: 4000,
fillColor: '#fff',
imageSmoothingEnabled: true,
imageSmoothingQuality: 'high'
};
const canvasOptions = {...defaultOptions, ...options};
const canvas = this.cropper.getCroppedCanvas(canvasOptions);
return canvas ? canvas.toDataURL('image/png') : null;
}
setAspectRatio(ratio) {
if (!this.cropper) {
return;
}
this.cropper.setAspectRatio(ratio);
}
setFormat(formatId) {
if (!this.settings.formats || !this.settings.formats[formatId]) {
console.error('ArtPuzzleCropper: Formato non valido', formatId);
return;
}
this.state.format = formatId;
const format = this.settings.formats[formatId];
if (format.ratio) {
this.setAspectRatio(format.ratio);
}
}
rotate(degrees) {
if (!this.cropper) {
return;
}
this.state.rotation = (this.state.rotation + degrees) % 360;
this.cropper.rotateTo(this.state.rotation);
}
rotateLeft() {
this.rotate(-90);
}
rotateRight() {
this.rotate(90);
}
zoom(ratio) {
if (!this.cropper) {
return;
}
this.cropper.zoom(ratio);
}
reset() {
if (!this.cropper) {
return;
}
this.cropper.reset();
this.state.rotation = 0;
}
destroy() {
if (this.cropper) {
this.cropper.destroy();
this.cropper = null;
}
}
getCropData() {
return this.state.cropData;
}
getState() {
return {
rotation: this.state.rotation,
format: this.state.format,
cropData: this.state.cropData,
originalImageData: this.state.originalImageData
};
}
}
window.ArtPuzzleCropper = ArtPuzzleCropper;
